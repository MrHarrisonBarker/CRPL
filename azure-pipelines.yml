name: CRPL-$(Build.BuildId)-$(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true

stages:
  - stage: SmartContracts
    pool:
      vmImage: ubuntu-latest
      demands: npm
    
    jobs:
      - job: Test
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js'

          - script: |
              npm i --also=dev
            workingDirectory: 'CRPL.Contracts'
            displayName: 'Install dependencies'

          - script: |
              npm run compile
            workingDirectory: 'CRPL.Contracts'
            displayName: 'Compile contracts'

          - script: |
              npm run coverage
            workingDirectory: 'CRPL.Contracts'
            displayName: 'Run tests and coverage'

  - stage: DotNet_Angular
    pool:
      vmImage: ubuntu-latest
      demands: npm
    
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    
    jobs:
      - job: Build_Test
        steps:
          - task: UseDotNet@2
            condition: succeeded()
            inputs:
              version: '6.0.x'
              includePreviewVersions: true

          - task: DotNetCoreCLI@2
            condition: succeeded()
            displayName: 'dotnet build'
            inputs:
              command: 'build'
              configuration: $(buildConfiguration)

          - task: DotNetCoreCLI@2
            condition: succeededOrFailed()
            displayName: 'dotnet test'
            inputs:
              command: 'test'
              arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
              publishTestResults: true
              projects: './CRPL.Tests'

          - task: Npm@1
            condition: succeededOrFailed()
            displayName: "npm install"
            inputs:
              command: 'ci'
              workingDir: 'CRPL.Web/ClientApp'

          - task: Npm@1
            condition: succeededOrFailed()
            displayName: 'Tests (Angular Application)'
            inputs:
              command: custom
              customCommand: run test -- --watch=false --code-coverage --browsers=ChromeHeadless
              workingDir: 'CRPL.Web/ClientApp'

          - task: reportgenerator@4
            displayName: 'Combine code coverage reports'
            condition: succeededOrFailed()
            inputs:
              reports: '$(Build.SourcesDirectory)/CRPL.Web/ClientApp/coverage/**/cobertura-coverage.xml;$(Agent.TempDirectory)/**/coverage.cobertura.xml;CRPL.Contracts/coverage/cobertura-coverage.xml'
              targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
              reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage report'
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: True
              projects: 'CRPL.Web/CRPL.Web.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/dotnet'
              zipAfterPublish: True

          - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: '$(Build.ArtifactStagingDirectory)'
                artifactName: 'CRPL'

          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'Pay-As-You-Go(9089fb88-0825-4040-b4e2-8281ff2d7726)'
              Action: 'Stop Azure App Service'
              WebAppName: 'CRPL'

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Pay-As-You-Go(9089fb88-0825-4040-b4e2-8281ff2d7726)'
              appType: 'webAppLinux'
              WebAppName: 'CRPL'
              packageForLinux: '$(System.DefaultWorkingDirectory)/dotnet/**/*.zip'

          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'Pay-As-You-Go(9089fb88-0825-4040-b4e2-8281ff2d7726)'
              Action: 'Start Azure App Service'
              WebAppName: 'CRPL'